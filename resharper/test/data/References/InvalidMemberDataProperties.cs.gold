using System.Collections.Generic;
using Xunit;

namespace Foo
{
    public class MyTest
    {
        [Theory]
        [MemberData("|NonPublicDataEnumerator|(0)")]
        public void Test1(int value)
        {
            Assert.Equal(42, value);
        }

        [Theory]
        [MemberData("|NonStaticDataEnumerator|(1)")]
        public void Test2(int value)
        {
            Assert.Equal(42, value);
        }

        [Theory]
        [MemberData("|InvalidReturnTypeDataEnumerator|(2)")]
        public void Test3(int value)
        {
            Assert.Equal(42, value);
        }

        [Theory]
        [MemberData("|NonPublicMethod|(3)")]
        public void Test4(int value)
        {
            Assert.Equal(42, value);
        }

        [Theory]
        [MemberData("|NonStaticMethod|(4)")]
        public void Test5(int value)
        {
            Assert.Equal(42, value);
        }

        [Theory]
        [MemberData("|InvalidReturnTypeMethod|(5)")]
        public void Test6(int value)
        {
            Assert.Equal(42, value);
        }

        [Theory]
        [MemberData("|NonPublicField|(6)")]
        public void Test7(int value)
        {
            Assert.Equal(42, value);
        }

        [Theory]
        [MemberData("|NonStaticField|(7)")]
        public void Test8(int value)
        {
            Assert.Equal(42, value);
        }

        [Theory]
        [MemberData("|InvalidReturnTypeField|(8)")]
        public void Test9(int value)
        {
            Assert.Equal(42, value);
        }

        // Needs to be public
        private static IEnumerable<object[]> NonPublicDataEnumerator
        {
            get { yield return new object[] { 42 }; }
        }

        // Needs to be static
        public IEnumerable<object[]> NonStaticDataEnumerator
        {
            get { yield return new object[] { 42 }; }
        }

        // Invalid return type signature
        public static IEnumerable<int[]> InvalidReturnTypeDataEnumerator
        {
            get { return new List<int[]>(new int[] { 42 }); }
        }
 
        // Needs to be public
        private static IEnumerable<object[]> NonPublicMethod()
        {
            yield return new object[] { 42 };
        }

        // Needs to be static
        public IEnumerable<object[]> NonStaticMethod()
        {
            yield return new object[] { 42 };
        }

        // Invalid return type signature
        public static IEnumerable<int[]> InvalidReturnTypeMethod()
        {
            return new List<int[]>(new int[] { 42 });
        }
 
        // Needs to be public
        private static IEnumerable<object[]> NonPublicField = new List<object[]> {
            new object[] { 42 }
        };

        // Needs to be static
        public IEnumerable<object[]> NonStaticField = new List<object[]> {
            new object[] { 42 }
        };

        // Invalid return type signature
        public static IEnumerable<int[]> InvalidReturnTypeField = new List<int[]> {
            new int[] { 42 }
        };
    }
}

------------------------------------------------
0: result=NOT_RESOLVED declaredElem=null
1: result=NOT_RESOLVED declaredElem=null
2: result=NOT_RESOLVED declaredElem=null
3: result=NOT_RESOLVED declaredElem=null
4: result=NOT_RESOLVED declaredElem=null
5: result=NOT_RESOLVED declaredElem=null
6: result=NOT_RESOLVED declaredElem=null
7: result=NOT_RESOLVED declaredElem=null
8: result=NOT_RESOLVED declaredElem=null
